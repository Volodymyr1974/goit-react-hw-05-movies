{"version":3,"file":"static/js/Movies.3daf9f85.chunk.js","mappings":"4TACAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAU,mCACVC,EACQ,qBADRA,EAEM,eAFNA,EAGO,SAHPA,EAIO,WAJPA,EAKO,WAEN,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACoBH,IAAAA,IAAA,WAAcE,EAAd,oBAAwCD,IAD5D,cACGG,EADH,yBAEIA,EAASC,MAFb,kEAIA,SAAeC,EAAtB,+CAAO,OAAP,oBAAO,WAA0BC,GAA1B,uFACoBP,IAAAA,IAAA,WAAcE,GAAd,OAA8BK,EAA9B,oBAA4CN,EAA5C,oBADpB,cACGG,EADH,yBAGIA,EAASC,MAHb,kEAKA,SAAeG,EAAtB,+CAAO,OAAP,oBAAO,WAAiCD,GAAjC,uFACoBP,IAAAA,IAAA,WACfE,GADe,OACCK,GADD,OACML,EADN,oBAC+BD,EAD/B,oBADpB,cACGG,EADH,yBAIIA,EAASC,MAJb,kEAMA,SAAeI,EAAtB,+CAAO,OAAP,oBAAO,WAA8BF,GAA9B,uFACoBP,IAAAA,IAAA,WACfE,GADe,OACCK,GADD,OACML,EADN,oBAC+BD,EAD/B,oBADpB,cACGG,EADH,yBAIIA,EAASC,MAJb,kEAMA,SAAeK,EAAtB,+CAAO,OAAP,oBAAO,WAA+BC,GAA/B,uFACoBX,IAAAA,IAAA,WACfE,EADe,oBACSD,EADT,kBAC0BU,EAD1B,+CADpB,cACGP,EADH,yBAIIA,EAASC,MAJb,oE,sHC9BP,EAA6B,8BAA7B,EAA8E,oCAA9E,EAAsI,qC,4BCOvH,SAASO,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAC1C,GAA0BC,EAAAA,EAAAA,UAASD,GAAnC,eAAOE,EAAP,KAAcC,EAAd,KAaA,OACI,kBACIC,UAAWC,EACXN,SAXa,SAACO,GAElB,GADAA,EAAEC,iBACmB,KAAjBL,EAAMM,OACN,OAAOC,IAAAA,OAAAA,QAAwB,qTAGnCV,EAASG,IAGT,WAKI,kBACIE,UAAWC,EACXK,KAAK,OACLV,MAAOE,EACPS,aAAa,MACbC,WAAS,EACTC,SAvBQ,SAACP,GACjBH,EAASG,EAAEQ,cAAcd,MAAMe,mBAyB3B,mBAAQL,KAAK,SACTN,UAAWC,EADf,uB,iCClCG,SAASW,EAAT,GAAoC,IAAdC,EAAa,EAAbA,UAC3BC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACKF,EAAUG,KAAI,YAAoB,IAAjB3B,EAAgB,EAAhBA,GAAI4B,EAAY,EAAZA,MAClB,OACI,yBACI,SAAC,KAAD,CAAMC,GAAE,kBAAa7B,GAAM8B,MAAO,CAAEC,KAAMN,GAA1C,SAAuDG,KADlD5B,QCDd,SAASgC,IAAc,IAAD,EACjC,GAAsCxB,EAAAA,EAAAA,UAAS,MAA/C,eAAOyB,EAAP,KAAoBC,EAApB,KACA,GAA4BC,EAAAA,EAAAA,MAA5B,eAAOC,EAAP,KAAeC,EAAf,KACMjC,EAAK,UAAGgC,EAAOE,IAAI,gBAAd,QAA0B,IAErCC,EAAAA,EAAAA,YAAU,WAAM,wCACZ,yFACkB,KAAVnC,EADR,iEAI8BoC,EAAAA,GAA2BpC,GAJzD,mBAIYqC,EAJZ,EAIYA,QAERP,EAAeO,GACQ,IAAnBA,EAAQC,OAPhB,yCAQe1B,IAAAA,OAAAA,QACH,gSATZ,4CADY,uBAAC,WAAD,wBAcZ2B,KACD,CAACvC,IAKJ,OACI,iCACI,SAACC,EAAD,CAAWE,MAAOH,EAAOE,SALb,SAAAF,GAChBiC,EAAU,CAAEjC,MAAAA,OAKP6B,IAAe,SAACV,EAAD,CAAYC,UAAWS","sources":["services/Api.jsx","webpack://react-homework-template/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","components/MoviesList/MoviesList.jsx","views/MoviesView.jsx"],"sourcesContent":["import axios from 'axios';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst API_KEY = '99f1057047bac17f2e8e4b1a5230a5c2';\nconst PARAM = {\n    trending: 'trending/movie/day',\n    search: 'search/movie',\n    movieID: 'movie/',\n    reviews: '/reviews',\n    credits: '/credits',\n};\nexport async function getTrandingFilms() {\n    const response = await axios.get(`/${PARAM.trending}?api_key=${API_KEY}`);\n    return response.data;\n};\nexport async function getMovieId(id) {\n    const response = await axios.get(`/${PARAM.movieID}${id}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n};\nexport async function getMovieIdReviews(id) {\n    const response = await axios.get(\n        `/${PARAM.movieID}${id}${PARAM.reviews}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n};\nexport async function getCastMovieId(id) {\n    const response = await axios.get(\n        `/${PARAM.movieID}${id}${PARAM.credits}?api_key=${API_KEY}&language=en-US`\n    );\n    return response.data;\n};\nexport async function getSearchMovies(query) {\n    const response = await axios.get(\n        `/${PARAM.search}?api_key=${API_KEY}&query=${query}&language=en-US&page=1&include_adult=false`\n    );\n    return response.data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"SearchForm\":\"SearchBar_SearchForm__J+i1a\",\"SearchForm_input\":\"SearchBar_SearchForm_input__-FIrC\",\"SearchForm_button\":\"SearchBar_SearchForm_button__WJfDq\"};","import { useState } from \"react\";\nimport style from './SearchBar.module.css';\nimport PropTypes from 'prop-types';\n// import { ImSearch } from 'react-icons/im';\nimport Notiflix from 'notiflix';\n\n\n\nexport default function SearchBar({ onSubmit, value }) {\n    const [qwery, setQwery] = useState(value);\n\n    const searchInput = (e) => {\n        setQwery(e.currentTarget.value.toLowerCase());\n    };\n    const searchSubmit = (e) => {\n        e.preventDefault();\n        if (qwery.trim() === '') {\n            return Notiflix.Notify.failure('Вибачте, поле пошуку не заповнено. Введіть запит для пошуку.');\n        }\n\n        onSubmit(qwery);\n    };\n    return (\n        <form\n            className={style.SearchForm}\n            onSubmit={searchSubmit}>\n\n\n            <input\n                className={style.SearchForm_input}\n                type=\"text\"\n                value={qwery}\n                autoComplete=\"off\"\n                autoFocus\n                onChange={searchInput}\n\n            />\n            <button type=\"submit\"\n                className={style.SearchForm_button}\n            >\n\n\n                Search\n            </button>\n        </form>\n\n    );\n\n};\nSearchBar.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n};","import PropTypes from 'prop-types';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport default function MoviesList({ filmsList }) {\n    const location = useLocation();\n    return (\n        <ul>\n            {filmsList.map(({ id, title }) => {\n                return (\n                    <li key={id} >\n                        <Link to={`/movies/${id}`} state={{ from: location }}>{title}\n                        </Link></li>\n                )\n            })}\n        </ul>\n    )\n}\n\nMoviesList.propTypes = {\n    filmsList: PropTypes.arrayOf(PropTypes.shape({\n        id: PropTypes.number.isRequired,\n        title: PropTypes.string.isRequired,\n    }))\n\n}","import SearchBar from \"components/SearchBar/SearchBar\";\nimport { useState, useEffect } from 'react';\nimport * as serviceApi from '../services/Api';\nimport { useSearchParams } from 'react-router-dom';\nimport Notiflix from 'notiflix';\nimport MoviesList from 'components/MoviesList/MoviesList';\n\n\nexport default function MoviesView() {\n    const [foundMovies, setFoundMovies] = useState(null);\n    const [search, setSearch] = useSearchParams();\n    const query = search.get('query') ?? '';\n\n    useEffect(() => {\n        async function searchMovie() {\n            if (query === '') {\n                return;\n            }\n            const { results } = await serviceApi.getSearchMovies(query)\n\n            setFoundMovies(results)\n            if (results.length === 0) {\n                return Notiflix.Notify.failure(\n                    'Ух...Щось пішло не так, або дані за Вашим запитом відсутні'\n                );\n            }\n        };\n        searchMovie();\n    }, [query]);\n\n    const searchQuery = query => {\n        setSearch({ query });\n    };\n    return (\n        <>\n            <SearchBar value={query} onSubmit={searchQuery} />\n            {foundMovies && <MoviesList filmsList={foundMovies} />}\n        </>\n    )\n}"],"names":["axios","API_KEY","PARAM","getTrandingFilms","response","data","getMovieId","id","getMovieIdReviews","getCastMovieId","getSearchMovies","query","SearchBar","onSubmit","value","useState","qwery","setQwery","className","style","e","preventDefault","trim","Notiflix","type","autoComplete","autoFocus","onChange","currentTarget","toLowerCase","MoviesList","filmsList","location","useLocation","map","title","to","state","from","MoviesView","foundMovies","setFoundMovies","useSearchParams","search","setSearch","get","useEffect","serviceApi","results","length","searchMovie"],"sourceRoot":""}